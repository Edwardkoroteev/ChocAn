#include "member.h"

//default constructor
member::member(){
    name = "";
    street = "";
    city = "";
    state = "";
    zip = "";
    number = "";
    status = false;
}

//paramaterized constructor creates the object data members respectively from the string arguments
member::member(const string& name,const string& street,const string& city,const string& state,const string& zip,const string& number,bool status){
    create(name,street,city,state,zip,number,status);
}

//copy constructor makes a deep copy of the member argument
member::member(const member& toCopy){
    copy(toCopy);
}

//sets the object data members respectively from the string arguments
bool member::create(const string& name,const string& street,const string& city,const string& state,const string& zip,const string& number,bool status){
    person::create(name,street,city,state,zip); 
    this->number = number;
    this->status = status;
    return true;
}

//makes a deep copy of the member argument
bool member::copy(const member& toCopy){
    return create(toCopy.name,toCopy.street,toCopy.city,toCopy.state,toCopy.zip,toCopy.number,toCopy.status);
}

//returns true if the member is active and in good standing, else returns false
bool member::isActive()const{
    return status;
}

//display function
void member::display(){
    cout << "Member Name:    " << name << endl;
    cout << "Member Number:  " << number << endl;
    cout << "Street Address: " << street << endl;
    cout << "City:           " << city << endl;
    cout << "State:          " << state << endl;
    cout << "Zip code:       " << zip << endl;
    cout << "Status:         ";
    if(status)
        cout << "Active\n\n";
    else
        cout << "Suspended\n\n";
}

//concatenates all strings together, delimiting each with "|", returns the new string
//used for writing to file, preformats
string member::prepareWrite()const{
    string prep;
    prep = name;
    prep += "|";
    prep += street; 
    prep += "|";
    prep += city;
    prep += "|";
    prep += state;
    prep += "|";
    prep += zip;
    prep += "|";
    prep += number;
    prep += "|";
    if(status)
        prep += "1";
    else
        prep += "0";
    return prep;
}

//initializes a member with a string generated by prepareWrite()
//used when reading from file
istream &operator>>(istream &input, member &toInit){
    getline(input, toInit.name, '|');
    getline(input, toInit.street, '|');
    getline(input, toInit.city, '|');
    getline(input, toInit.state, '|');
    getline(input, toInit.zip, '|');
    getline(input, toInit.number, '|');
    input >> toInit.status;
    return input;
}

//checks that the argument matches the member number and returns the respective boolean
bool member::numberMatch(const string& toMatch)const{
    if(number.compare(toMatch) == 0)
        return true;
    return false;
}

//setter for name used for modification by CAC
void member::setName(const string & name){
    this->name = name;
}

//setter for street used for modification by CAC
void member::setStreet(const string & street){
    this->street = street;
}    

//setter for city used for modification by CAC
void member::setCity(const string & city){
    this->city = city;
}

//setter for state used for modification by CAC
void member::setState(const string & state){
    this->state = state;
}

//setter for zip used for modification by CAC
void member::setZip(const string & zip){
    this->zip = zip;
}

//setter for status used for modification by CAC
void member::changeStatus(){
    if(status)
        status = false;
    else
        status = true;
}

//overloaded > operator compares name
bool member::operator>(const member& toCompare)const{
    if(name.compare(toCompare.name) > 0)
        return true;
    return false;
}

//overloaded < operator compares name
bool member::operator<(const member& toCompare)const{
    if(name.compare(toCompare.name) > 0)
        return false;
    return true;
}

//overloaded == operator compares number
bool member::operator==(const member& toCompare)const{
    if(name.compare(toCompare.number) == 0)
        return true;
    return false;
}
