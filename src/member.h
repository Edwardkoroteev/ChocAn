#ifndef MEMBER_h
#define MEMBER_h
#include "person.h"

//member class derives from the abstract base person class
class member:public person{
    friend class RecordManager;
    public:
        //default constructor
        member();
        //argumented constructor takes the necessary arguments, checks for length and "|", throws violating string
        member(const string& name,const string& street,const string& city,const string& state,const string& zip,const string& number,bool status);
        //copy constructor
        member(const member&);
        //create takes arguments and fills the object data, checks for length and "|", throws violating string
        bool create(const string& name,const string& street,const string& city,const string& state,const string& zip,const string& number,bool status);
        //copy function copies the data to the current object
        bool copy(const member&);
        //returns the boolean with regards to whether the member is active
        bool isActive()const;
        //displays member
        void display();
        //returns a string with all parameters in a single string delimited by '|'
        string prepareWrite()const;
        //initializes a member with a string generated by prepareWrite()
        friend istream &operator>>(istream &input, member &toInit);
        //returns bool regarding member number match
        bool numberMatch(const string& number)const;
        //allows modification;
        void setName(const string&);
        //allows modification
        void setStreet(const string&);
        //allows modification
        void setCity(const string&);
        //allows modification
        void setState(const string&);
        //allows modification
        void setZip(const string&);
        //allows modification
        void changeStatus();
        //overloaded > operator compares name
        bool operator>(const member& toCompare)const;
        //overloaded < operator compares name
        bool operator<(const member& toCompare)const;
        //overloaded == operator compares number
        bool operator==(const member& toCompare)const;

    private:
        string number;      //9 digit member number
        bool status;        //boolean if active member
};
#endif
//ends member.h definition
