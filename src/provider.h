#ifndef PROVIDER_h
#define PROVIDER_h
#include "person.h"

//provider class derives from the abstract base person class
class provider:public person{
    friend class RecordManager;
    public:
        //default constructor
        provider();
        //argumented constructor takes the necessary arguments, checks for length and "|", throws violating string
        provider(const string& name,const string& street,const string& city,const string& state,const string& zip,const string& number,const string& password);
        //copy constructor
        provider(const provider &);
        //create takes arguments and fills the object data, checks for length and "|", throws violating string
        bool create(const string& name,const string& street,const string& city,const string& state,const string& zip,const string& number,const string& password);
        //copy function copies the data to the current object
        bool copy(const provider&);
        //displays provider information
        void display();
        //verifies passed password returning boolean regarding match.
        bool isPassword(const string& password)const;
        //returns a string with all parameters in a single string delimited by '|'
        string prepareWrite()const;
        //initializes a service with a string generated by prepareWrite()
        friend istream &operator>>(istream &input, provider &toInit);
        //returns bool regarding member number match
        bool numberMatch(const string& number)const;
        //allows modification;
        void setName(const string& name);
        //allows modification
        void setStreet(const string& street);
        //allows modification
        void setCity(const string& city);
        //allows modification
        void setState(const string& state);
        //allows modification
        void setZip(const string& zip);
        //allows modification
        void setPassword(const string& password);
        //overloaded > operator compares name
        bool operator>(const provider&)const;
        //overloaded < operator compares name
        bool operator<(const provider&)const;
        //overloaded == operator compares number
        bool operator==(const provider&)const;

    private:
        string number;      //9 digit provider number
        string password;    //provider password, 20 character limit
};
#endif
//ends definiton of provider
